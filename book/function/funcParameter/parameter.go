package funcParameter

import "fmt"

// 形参与实参
// 形参：函数定义时有参数，该变量可称为函数的形参。形参就像定义在函数体内的局部变量
// 实参：调用函数，传递过来的变量就是函数的实参
// 实参有两种方式： 值传递 、 引用传递
// 值传递：指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。
// 引用传递：是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。
// 注意1：无论是值传递，还是引用传递，传递给函数的都是变量的副本，不过，值传递是值的拷贝。引用传递是地址的拷贝，一般来说，地址拷贝更为高效。而值拷贝取决于拷贝的对象大小，对象越大，则性能越低。
//
// 注意2：map、slice、chan、指针、interface默认以引用的方式传递。
// 可变参数本质上是 slice
func test(s string, n ...int) string {
	var x int
	for _, i := range n {
		x += i
	}

	return fmt.Sprintf(s, x)
}

func FuncParameter() {
	s := []int{1, 2, 3}
	// 使用 slice 对象做变参时，必须展开。
	res := test("sum: %d", s...) // slice... 展开slice
	println(res)
}
